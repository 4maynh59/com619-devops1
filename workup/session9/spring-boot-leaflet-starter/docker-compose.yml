# example locally deploying built application but also has deployer
# example build deployer as part of docker compose https://github.com/zhao-lin-li/docker-compose-build/tree/master
version: "3.2"

# using fixed ip addresses so opennms provisoning config works
# to see all network use docker network ls
# to see config use docker network inspect spring-boot-leaflet-starter_jettynw
# note gateway is 172.20.1.1 
networks:
  jettynw:
    ipam:
      config:
        - subnet: 172.20.1.0/24


volumes:
  data-jetty-files: {}
  data-jetty-logs: {}

services: 
    # rest simulator app runs on http://localhost:8080/
    # cargo deployer runs on http://localhost:8080/cargo-jetty-deployer/
    # see https://codehaus-cargo.github.io/cargo/Jetty+Remote+Deployer.html
    # also https://www.baeldung.com/deploy-to-jetty
    
    restsimulator :
        container_name: restsimulator
        hostname: restsimulator
        build: .
        ports: 
         - "8080:8080"
         - "11099:11099"
         - "11022:22"
        volumes:
          # setting up log data storage (target is used in log4j2.xml)
          - data-jetty-logs:/var/lib/jetty/target:rw
          # setting up data files storage
          - data-jetty-files:/data-jetty-files:rw
          # setting up
          # - ./container-fs/jetty/start.d/start.ini:/var/lib/jetty/start.d/start.ini
          # setting up properties for restsimulator app
          - ./container-fs/jetty/start.d/restsimulator.ini:/var/lib/jetty/start.d/restsimulator.ini
          # deploying built restsimulator war file directly into application
          - ./target/spring-boot-leaflet-starter-0.0.1-SNAPSHOT.war:/var/lib/jetty/webapps/root.war
          # setting up properties for JMX monitoring
          - ./container-fs/jetty/start.d/jmx-remote.ini:/var/lib/jetty/start.d/jmx-remote.ini
          
        #command: [ "java",    "-Dcom.sun.management.jmxremote",    "-Dcom.sun.management.jmxremote.ssl=false",    "-Dcom.sun.management.jmxremote.authenticate=false",     "-Dcom.sun.management.jmxremote.port=1099",    "-jar","$JETTY_HOME/start.jar"]
        # ,"etc/jetty-jmx.xml","etc/jetty.xml"
        
    #    "./wait-for-it.sh", "my-svc-dbserver:3306", "--", "sh", "-c", "java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005 -jar /app.jar"]
    #    environment:
     #     JAVA_OPTIONS: "-Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false  -Dcom.sun.management.jmxremote.port=11099 -Dcom.sun.management.jmxremote.local.only=false"
        networks:
           jettynw:
             ipv4_address: 172.20.1.50
        
    jmx-client :
        container_name: jmx-client
        hostname: jmx-client
        build: ./eclipse-temurin
        networks:
           jettynw:
             ipv4_address: 172.20.1.51
        
    minion-app1:
        image: ${DOCKER_REGISTRY:-docker.io}/${DOCKER_ORG:-opennms}/${MINION_OCI:-minion}:${ONMS_VERSION:-bleeding}
        container_name: minion-app1
        hostname: minion-app1
        sysctls:
          net.ipv4.ping_group_range: "0 429496729"
        environment:
          TZ: ${TIMEZONE:-America/New_York}
          JAVA_MIN_MEM: 512M
          JAVA_MAX_MEM: 2048M
        volumes:
          - './container-fs/minion-app1/opt/minion/minion-config.yaml:/opt/minion/minion-config.yaml'
        command: ["-f"]
        healthcheck:
          test: "/health.sh"
          interval: 30s
          timeout: 20s
          retries: 3
        ports:
          - "18201:8201/tcp"
          - "11162:1162/udp"
          - "11514:1514/udp"
        deploy:
          resources:
            limits:
              cpus: "0.5"
              memory: 2560M
        networks:
          jettynw:
             ipv4_address: 172.20.1.25
        # see https://stackoverflow.com/questions/24319662/from-inside-of-a-docker-container-how-do-i-connect-to-the-localhost-of-the-mach
        extra_hosts:
          - "host.docker.internal:host-gateway"


